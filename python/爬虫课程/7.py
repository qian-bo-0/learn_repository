#数据解析
"""
三种解析方式：
1.re解析--->通过正则表达式进行解析(速度快)
2.bs4解析
3。xpath解析(简单)
"""


#正则表达式
'''
正则表达式： 一种使用表达式的方式对字符串进行匹配的语法规则
页面源代码就是一个很长的字符串
正则的语法：用元字符进行排列组合来匹配字符串
'''


#元字符-->具有固定含义的特殊符号
'''
常用元字符
.           匹配除了换行符以外的任意字符  (..就是两个字符，每个元字符默认只匹配一个字符串)
\w          匹配字母或者数字或者下划线
\s          匹配任意的空白符(空格换行回车)
\d          匹配数字
\n          匹配一个换行符
\t          匹配一个制表符

^           匹配字符串的开始（规定字符串必须是后边的元字符种类）（^\d   规定字符串的开始必须是数字）
$           匹配字符串的结尾

\W          匹配非字母或数字或下划线
\S          匹配任意的非空白符
\D          匹配非数字
a||b        a或者b
()          匹配括号内的表达式，也表示一个组
[...]       匹配中括弧号中的字符组-->[a-zA-Z0-9]
[^...]      匹配除了字符组中的字符的所有字符
'''


#量词：控制元字符出现的次数
'''
*            重复0次或者更多次
+            重复一次或者更多次        （\d+）
？            重复零次或者一次
{n}          重复n次
{n,}         重复n次或者更多次
{n,m}       重复n到m次
'''


#贪婪匹配和惰性匹配
'''
.*          贪婪匹配
.*?          惰性匹配
'''

'''
*---->尽可能多的去匹配
.*?--->表示尽可能少的去匹配，是一个固定搭配
.*?x------>表示尽可能少的去匹配知道第一个x
'''

'''
eg.玩儿吃鸡游戏，晚上一起上游戏，干嘛呢？打游戏啊

正则：玩儿.*?游戏
结果：玩儿吃鸡游戏
'''


















